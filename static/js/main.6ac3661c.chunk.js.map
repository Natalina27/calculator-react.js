{"version":3,"sources":["Components/Counter/Counter.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Counter","props","id","name","count","onClick","decrement","increment","remove","App","useState","counters","setCounters","decrementCounter","console","log","index","findIndex","el","newCounters","incrementCounter","map","removeCounter","filter","className","reduce","a","b","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAkBeA,MAff,SAAiBC,GACb,OACI,mCACO,gCAASA,EAAMC,IADtB,gBAEiB,gCAASD,EAAME,MAFhC,iBAGkB,gCAASF,EAAMG,OAE7B,4BAAQC,QAAS,kBAAMJ,EAAMK,UAAUL,EAAMC,MAA7C,KACA,4BAAQG,QAAS,kBAAMJ,EAAMM,UAAUN,EAAMC,MAA7C,KACA,4BAAQG,QAAS,kBAAMJ,EAAMO,OAAOP,EAAMC,MAA1C,YC2DGO,MAnEf,WAEE,IAFa,EAQmBC,mBANJ,CAC1B,CAAER,GAAI,IAAKC,KAAM,YAAaC,MAAO,GACrC,CAAEF,GAAI,IAAKC,KAAM,YAAaC,MAAO,GACrC,CAAEF,GAAI,IAAKC,KAAM,YAAaC,MAAO,KAL1B,mBAQNO,EARM,KAQIC,EARJ,KAgBPC,EAAmB,SAACX,GACxBY,QAAQC,IAAI,OAASb,GACrB,IAAMc,EAAQL,EAASM,WAAU,SAAAC,GAAE,OAAIA,EAAGhB,KAAOA,KAC3CiB,EAAW,YAAOR,GACxBQ,EAAYH,GAAOZ,MAAQe,EAAYH,GAAOZ,MAAQ,EACtDQ,EAAYO,IAGRC,EAAmB,SAAClB,GACxBY,QAAQC,IAAI,OAASb,GACrB,IAAMiB,EAAcR,EAASU,KAAI,SAAAH,GAC/B,OAAGA,EAAGhB,KAAOA,EAAW,eAAKgB,EAAZ,CAAgBd,MAAOc,EAAGd,MAAQ,IAC5Cc,KAETN,EAAYO,IAGRG,EAAgB,SAACpB,GACrB,IAAMiB,EAAcR,EAASY,QAAO,SAAAL,GAAE,OAAIA,EAAGhB,KAAOA,KACpDU,EAAYO,IAYd,OACE,yBAAKK,UAAU,OACb,wCADF,SAESb,EAASc,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAIC,EAAEvB,QAAO,GAC7C,4BAAQC,QAzCY,WACtBS,QAAQC,IAAI,mBACZ,IAAMI,EAAcR,EAASU,KAAI,SAAAH,GAAE,sBAAUA,EAAV,CAAcd,MAAO,OACxDQ,EAAYO,KAsCV,qBACA,6BACCR,EAASU,KAAI,SAAAH,GAAE,OAAI,kBAAC,EAAD,CAASU,IAAKV,EAAGhB,GACCA,GAAIgB,EAAGhB,GACPC,KAAMe,EAAGf,KACTC,MAAOc,EAAGd,MACVG,UAAWa,EACXd,UAAWO,EACXL,OAAQc,SCnDhCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.6ac3661c.chunk.js","sourcesContent":["import React from \"react\";\nimport '../Counter/Counter.css';\n\nfunction Counter(props) {\n    return(\n        <div>\n            ID <strong>{props.id}</strong>\n            Counter name <strong>{props.name}</strong>\n            Counter value <strong>{props.count}</strong>\n\n            <button onClick={() => props.decrement(props.id)}>-</button>\n            <button onClick={() => props.increment(props.id)}>+</button>\n            <button onClick={() => props.remove(props.id)}>DELETE</button>\n\n        </div>\n    );\n}\n\nexport default Counter;","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"../Counter/Counter\";\n\nfunction App() {\n\n  const InitialCounterState = [\n    { id: 123, name: 'Counter 1', count: 2 },\n    { id: 234, name: 'Counter 2', count: 5 },\n    { id: 345, name: 'Counter 3', count: 8 },\n  ];\n\n  const [counters, setCounters] = useState(InitialCounterState);\n\n  const resetTotalCount = () =>{\n    console.log('resetTotalCount');\n    const newCounters = counters.map(el => ({ ...el, count: 0}));\n    setCounters(newCounters);\n  };\n\n  const decrementCounter = (id) => {\n    console.log('DEC ' + id);\n    const index = counters.findIndex(el => el.id === id);\n    const newCounters = [...counters];\n    newCounters[index].count = newCounters[index].count - 1;\n    setCounters(newCounters);\n  };\n\n  const incrementCounter = (id) => {\n    console.log('INC ' + id);\n    const newCounters = counters.map(el =>{\n      if(el.id === id) return { ...el, count: el.count + 1};\n      return el;\n        });\n    setCounters(newCounters);\n  };\n  \n  const removeCounter = (id) => {\n    const newCounters = counters.filter(el => el.id !== id);\n    setCounters(newCounters);\n  };\n\n  const addCounter =(name, count) => {\n    const newCounters = [...counters, {\n      id: Math.random(),\n      name,\n      count\n    }];\n    setCounters(newCounters);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Counters</h1>\n      Total {counters.reduce((a,b) => a + b.count, 0)}\n      <button onClick={resetTotalCount}>Reset total count</button>\n      <hr />\n      {counters.map(el => <Counter key={el.id}\n                                            id={el.id}\n                                            name={el.name}\n                                            count={el.count}\n                                            increment={incrementCounter}\n                                            decrement={decrementCounter}\n                                            remove={removeCounter}\n\n      />)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}